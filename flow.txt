
>>> First Glance Idea JotDown <<<<<
1. 구현사항 정리하기
- 메인 페이지 : 검색바 + trending 영상들 list로 보여줌
- 검색결과 페이지 : 검색바 + 검색된 영상들 list로 보여줌
- 비디오클릭한 페이지 : 검색바 + 영상 + 영상설명 + 관련 영상들 -> trending or 검색된 keyword 관련 영상
+ 모든 페이지는 반응형임

2. UI component로 나누기
- search bar
- video : 개별 영상 (썸네일 + 제목 + 채널이름) 
    -> 클릭하면 새로운 페이지로 redirect (상세 페이지) : videolist, video, title, channel, description이 다 보내져야함.
- mainpage : search bar + video list

*** 리액트는 페이지별로 어떻게 만들지? 디렉토리를 어떻게 정리를 하는 것이 좋을까?
*** redirect하면 prop이 주어질 수 있음? 데이터를 저장하면서 페이지에 변동이 있을 수 있나?


3. 전체적인 flow chart 작성 
- 유튜브 api를 이용해서 데이터를 json형태로 받아옴 -> 
    => json을 string array로 변환
    => video들이 들어있는 array를 돌면서 썸네일url, 제목, 채널이름, url(링크)를 prop으로 보내기 : video component로
- 인기동영상 / 검색된 keyword 관련 동영상인지에 따라 바뀌어야함
    => default : 인기동영상
    => searchbar에 검색어가 들어가서 submit되면 바뀌어야함
    => state로 조정해야할 듯  (searchbar에서도 부모의 state를 바꿔야하는 쪽으로)
- 상세페이지에서는 보내진 videolist, video, title, channel, description을 보여주기만 하면됨 -> stateless?

-----------------------------------------------------------------------------------------------------------------

>>>> Search bar <<<<
- app과 연결하기 + render에 넣기
    ㄴ> 에러 : import './components/searchBar'로 썼더니 틀림 
    => 해결 : import SearchBar from './components/searchBar';로 써야함
- youtube icon 넣기 
    ㄴ> fontawesome yarn으로 설치 : yarn add @fortawesome/fontawesome-free
    ㄴ> 에러 : 계속 icon이 안보임
    => 해결 : index.js에 import '@fortawesome/fontawesome-free/js/all.js'; 추가
    ㄴ> class 속성을 className으로 변경
- searchBar.css 만듦 -> searchBar.jsx와 함께 searchBar 폴더안에 넣음



----------------------------------------------------------------------

>>>> Fetch <<<<<<<<<

막힘 1 ))
=> 왜 videoList의 length 0일까 ....왜 안나올까....

        const API_KEY = "AIzaSyANisTUQjLFLaB1DI-jHriie0Bpy6ZXo58";
        const URL = `https://youtube.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=25&regionCode=kr&key=${API_KEY}`
        let videoList = [];
        fetch(URL).then(response => response.json())
        .then(json => json.items.map(item => videoList.push(item))) 

        videoList.map(video => console.log(video.kind));


=> 우선은 data는 hardcoding해서 해결함

const API_KEY = "AIzaSyANisTUQjLFLaB1DI-jHriie0Bpy6ZXo58";
        const URL = `https://youtube.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=5&regionCode=kr&key=${API_KEY}`;
        let videoList = []
        fetch(URL)
        .then(response => response.json())
        .then(data => data.items.map(item => {
            const video = {
                thumbnail_url : item.snippet.thumbnails.default.url,
                title : item.snippet.title,
                channel : item.snippet.channelTitle,
                id : item.id
            }
            videoList.push(video)
        }))
       
        const videos = [
            {
                thumbnail_url: "https://i.ytimg.com/vi/xnI1QBVKJEI/default.jpg", 
                title: "삼겹살에 치즈김치볶음밥 처음 먹어본 영국 고등학생들의 반응!?", 
                channel: "영국남자 Korean Englishman", 
                id: "xnI1QBVKJEI"
            },
            {
                thumbnail_url: "https://i.ytimg.com/vi/uvAvQvPJ_H4/default.jpg", 
                title: "근데노인정", 
                channel: "런닝맨 - 스브스 공식 채널", 
                id: "uvAvQvPJ_H4"
            },{
                thumbnail_url: "https://i.ytimg.com/vi/BjmmvBMXbSU/default.jpg", 
                title: "fromis_9 (프로미스나인) 'Talk & Talk' Official MV", 
                channel: "HYBE LABELS",
                id: "BjmmvBMXbSU"
            },{
                thumbnail_url: "https://i.ytimg.com/vi/GSUTDopLncM/default.jpg", 
                title: "이라크전 공식 훈련 15분 풀공개 #무편집 #완전체훈련 | 월드컵 최종예선 EP.3", 
                channel: "KFATV_한국 축구 국가대표팀", 
                id: "GSUTDopLncM"
            },{
                thumbnail_url: "https://i.ytimg.com/vi/AqrGqUAxwsE/default.jpg", 
                title: "우리는 탭을 치지 않는다, 기절할 뿐. (침착맨X주호민X기안84 feat.김동현) | 말년을 건강하게 EP.15", 
                channel: "M드로메다 스튜디오", 
                id: "AqrGqUAxwsE"
            }

        ]
        
        
        return (
            <ul>
                {
                    videos.map(video => {
                        const href=`https://www.youtube.com/watch?v=${video.id}`;
                        return (
                            <li>
                                <a href={href}><img src={video.thumbnail_url} alt="thumbnail" /></a>
                                <h2>{video.title}</h2>
                                <span>{video.channel}</span>
                            </li>
                        )
                    }
                    )
                }
            </ul>
        )
    }
}


